<?xml version="1.0" encoding="UTF-8"?>

<!--
If the color is not specified by a word, the RGBA-values will be used instead.
The RGBA-values should be between 0 and 1.
Currently supported colors are: black, white, red, green, blue, gray, yellow, cyan, magenta
To get a darker version of the color add "dark" infront of the name
(e.g. dark blue), that doesn't work with black or white.
-->

<visualizer_context>
<background>
  <rgba>
    <r> .9 </r>
    <g> .9 </g>
    <b> .9 </b>
  </rgba>
</background>



<!--  The parameter for the voxel map 0 -->
<victor_actual_map>
  <!-- only voxels with an occupancy >= occupancy_threshold will be drawn. Has to be in the range of 1 to 255 -->
  <occupancy_threshold> 1 </occupancy_threshold>

  <!--her you can specifie an offset to the voxel map (only effects the visualization)-->
  <!--
      <offset>
        <x> 0 </x>
        <y> 50 </y>
        <z> 0 </z>
      </offset>
      -->
  <!-- definde the colors for the different voxel types -->
  <!-- type DYNAMIC  -->
  <all_types>
    <rgba>
      <r> .8 </r>
      <g> .8 </g>
      <b> .8 </b>
    </rgba>
    
  </all_types>
  <type_0>
    blue
  </type_0>
  <!--  type STATIC -->
  <type_1>
    <rgba>
      <r> 0 </r>
      <g> 0 </g>
      <b> 1 </b>
    </rgba>
  </type_1>
  <!-- ========== type COLLISION =========== -->
  <type_2>
    red
  </type_2>
  <!-- ====== type SWEPT_VOLUME_END === -->
  <type_3>
    magenta
  </type_3>
</victor_actual_map>


<!-- ============- The parameter for the voxel map 1====== -->

<env_map>
  <occupancy_threshold> 1 </occupancy_threshold>
  <all_types>
    <rgba>
      <r> 1.0 </r>
      <g> 0.3 </g>
      <b> 0.3 </b>
    </rgba>
    
  </all_types>

</env_map>




<!-- =============== The parameter for camera============ -->
<camera>
  <position>
    <x> 127.681 </x>
    <y> -34.225 </y>
    <z> 52.993 </z>
  </position>
  <focus>
    <x> 100 </x>
    <y> 100 </y>
    <z> 50 </z>
  </focus>
  <horizontal_angle> 186.993 </horizontal_angle> <!-- given in Deg -->
  <vertical_angle> -9.50091 </vertical_angle> <!-- given in Deg -->
  <field_of_view> 60 </field_of_view> <!-- given in Deg -->
  <window_width> 1024 </window_width>
  <window_height> 768 </window_height>
</camera>

<!-- =============== some miscellaneous parameter============ -->
<miscellaneous>
  <interpolation_repeat> 500 </interpolation_repeat>   <!-- interpolation color repeats after x voxels -->
  <min_view_dim> 200 </min_view_dim>
  <min_xyz_value>   <!--minimal x,y,z value that will be drawn. Input will be treated as unsigned integer-->
    <x> 0 </x>
    <y> 0 </y>
    <z> 0 </z>
  </min_xyz_value>
  <max_xyz_value>    <!--exclusive upper x,y,z boundary. Input will be treated as unsigned integer-->
    <x> -1 </x>
    <y> -1 </y>
    <z> -1 </z>
  </max_xyz_value>
  <max_memory_usage> 0 </max_memory_usage>  <!--In MByte, 0 <=> no limit -->
  <max_fps> 60 </max_fps>  <!--0 <=> no limit -->
  <draw_edges_of_triangles> true </draw_edges_of_triangles>
  <draw_filled_triangles> true </draw_filled_triangles>
  <draw_whole_map> true </draw_whole_map> <!-- disables the view cutting -->
  <grid_distance> 25 </grid_distance> <!-- the distance between two grid lines -->
  <grid_height> 0 </grid_height> <!-- the height where the grid will be drawn -->
  <grid_max_x> 500 </grid_max_x> <!-- the x dimension of the grid -->
  <grid_max_y> 500 </grid_max_y> <!-- the y dimension of the grid -->
  <grid_color> black </grid_color>
  <unit_scale> 1 cm </unit_scale>
</miscellaneous>

<!-- =============== the parameters for the cubeoid of the primitive list============ -->
<defaultCuboid>
  cyan
  <position>
    <x> 0 </x>
    <y> 0 </y>
    <z> 0 </z>
  </position>
  <side_length>
    <x> 1 </x>
    <y> 1 </y>
    <z> 1 </z>
  </side_length>
</defaultCuboid>

<!-- =============== example to insert one cuboid/sphere into the szene============ -->
<!--
    <cuboid>
    cyan
    <position>
    <x> 0 </x>
    <y> 20 </y>
    <z> 0 </z>
    </position>
    <side_length>
    <x> -100 </x>
    <y> 20 </y>
    <z> 1 </z>
    </side_length>
    </cuboid>
-->

</visualizer_context>
